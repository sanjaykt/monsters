{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","App","state","searchTerm","fetch","then","response","json","setState","this","filteredMonsters","filter","toLowerCase","includes","placeholder","onChange","event","target","value","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qSAGaA,G,kBAAO,SAACC,GACnB,OAAO,yBAAKC,UAAU,kBACpB,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,4BAAKL,EAAMI,QAAQE,MACnB,4CAAcN,EAAMI,QAAQG,WCenBC,EAAW,SAAAR,GACtB,OAAO,yBAAKC,UAAU,aACpBD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAIxB,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SC0CvBQ,E,kDAjEb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IAEDa,MAAQ,CACXJ,SAAU,GACVK,WAAY,IALG,E,gEASE,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAAE,GAAI,OAAI,EAAKC,SAAS,CAACV,SAAUS,S,+BAGjC,IAAD,SAC2BE,KAAKP,MAA9BJ,EADF,EACEA,SAAUK,EADZ,EACYA,WACXO,EAAmBZ,EAASa,QAAO,SAAAlB,GAAO,OAAIA,EAAQE,KAAKiB,cAAcC,SAASV,EAAWS,kBAErG,OACE,yBAAKtB,UAAU,OAEb,2BACEwB,YAAY,SACZC,SAAW,SAAAC,GAIP,EAAKR,SAAS,CAACL,WAAYa,EAAMC,OAAOC,QAAQ,WAC5CC,QAAQC,IAAI,+CAA6C,EAAKlB,MAAMC,eAIxEgB,QAAQC,IAAI,kCAAgC,EAAKlB,MAAMC,eAK7D,kBAAC,EAAD,CAAUL,SAAUY,S,GAvCVW,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.727c94ee.chunk.js","sourcesContent":["import React from \"react\";\nimport './card.styles.css'\n\nexport const Card = (props) => {\n  return <div className='card-container'>\n    <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n    <h1>{props.monster.name}</h1>\n    <p>{`email: ${props.monster.email}`}</p>\n  </div>\n}\n","import React from 'react';\nimport './card-list.styles.css';\nimport {Card} from \"../card/card.component\";\n//\n// export function CardList(props) {\n//   console.log(props);\n//   return <h1>Hello</h1>\n// }\n\n// export const CardList = props => {\n//   console.log(props);\n//   return <h1>Hello....</h1>\n// }\n//\n// export const CardList = props => {\n//   console.log(props);\n//   console.log('children', props.children)\n//   // return <div className='card-list'>{props.name} {props.children}</div>\n//   return <div className='card-list'>{props.children}</div>\n// }\n\n\nexport const CardList = props => {\n  return <div className='card-list'>{\n    props.monsters.map(monster => (\n      // <h1 key={monster.id}>\n      //   {monster.name}\n      // </h1>\n      <Card key={monster.id} monster={monster} />\n    ))\n  }</div>\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      monsters: [],\n      searchTerm: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then(json => this.setState({monsters: json}))\n  }\n\n  render() {\n      const {monsters, searchTerm } = this.state;\n      const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchTerm.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n        {/*<CardList name='Amma'>Amma Amma</CardList>*/}\n        <input\n          placeholder='search'\n          onChange={(event => {\n              //set the sate and then call the function that was registered... it's like .then\n              // this will set the state of the component and then execute the function\n              // will print whatever you type in the search bar\n              this.setState({searchTerm: event.target.value}, () => {\n                  console.log('value: asynchronous call (call back) --> ', this.state.searchTerm)\n                });\n              // this does not wait for the setState to happen... will do the execution right after the above statement\n              // will be behind one character\n              console.log('value: synchronous call --> ', this.state.searchTerm)\n            }\n          )\n          }\n        />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}